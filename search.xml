<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[在Hexo上NexT主题中痛断Algolia决然启用LocalSearch本地搜索]]></title>
    <url>%2Fposts%2Fceaf4638.html</url>
    <content type="text"><![CDATA[客观来讲，Aloglia是个功能非常不错、服务很完善、后台很强大的搜索服务平台，是一个特别理想的搜索服务，可是她虽阳春白雪，无奈我等身在伟大的墙以内，所以就会遇到很多的问题。 使用Aloglia时不时会报出一些我这等水平的人解决起来嫌麻烦的问题，比如执行hexo algolia时不时就报错，让你重新export HEXO_ALGOLIA_INDEXING_KEY，你当然记不住Key了，要么找你的备份记录要么登录Aloglia去取，处理好后，好不容易稳定了一时，之后又会出现这种问题，比较烦人，这就是耍花枪的代价。 如此，只能另觅他途回归简约，果断的启用由 flashlab 贡献的hexo-generator-searchdb部署Local Search本地搜索，结果很完美：本地化无后端、高效、全文搜索，这意味着什么呢？ 你的搜索不再依赖第三方服务的挂与不挂掉。 你可以不用每次更新文章后还要hexo algolia。 你只是不能掌握对你Blog进行检索的相关数据而已，这个一点都不重要。 部署和启用Local Search，参考NexT文档一步步来就可以，过程比部署Algolia会简单一些。 安装 hexo-generator-searchdb，在站点的根目录下执行以下命令： 1$ npm install hexo-generator-searchdb --save 执行结果： 1234567891011121314$ cd taoblog$ npm install hexo-generator-searchdb --savenpm WARN deprecated ejs@1.0.0: Critical security bugs fixed in 2.5.5npm WARN babel-eslint@10.0.2 requires a peer of eslint@&gt;= 4.12.1 but none is installed. You must install peer dependencies yourself.+ hexo-generator-searchdb@1.0.8added 3 packages from 3 contributors in 5.674s╭────────────────────────────────────────────────────────────────╮ │ │ │ New minor version of npm available! 6.10.3 → 6.11.3 │ │ Changelog: https://github.com/npm/cli/releases/tag/v6.11.3 │ │ Run npm install -g npm to update! │ │ │ ╰────────────────────────────────────────────────────────────────╯ 编辑 站点配置文件，新增以下内容到任意位置： 12345search: path: search.xml field: post format: html limit: 10000 编辑 next主题配置文件，启用本地搜索功能： 123# Local searchlocal_search: enable: true NexT主题配置文件中Local search字段的默认内容如下，将enable改为true 123456789# Local search# Dependencies: https://github.com/flashlab/hexo-generator-searchlocal_search: enable: false # if auto, trigger search by changing input # if manual, trigger search by pressing enter key or search button trigger: auto # show top n results per article, show all results by setting to -1 top_n_per_article: 1 到此这个工作就顺利完成了！ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>web&amp;blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo上NexT评论系统来回折腾后最终为什么采用Valine?]]></title>
    <url>%2Fposts%2Fef418d47.html</url>
    <content type="text"><![CDATA[Valine有什么好？凭着喜好折腾过Disqus和Livere，都让我非常的无奈，对Disqus而言它在墙外我在墙内，麻烦；对Livere而言中文名起的很好，然盛名之下其实难副，在此称其为某必力。 所以在下将目光投向了Valine，到头来发现选择它的理由竟无比的充分和必要： 最诱惑我的是可以让阅读者匿名评论！ 呈现速度快，效率高，不像某必力那么不稳定，时不时明明登录了写完评论，一点发布，还让你登录，有愧于这“力”字。 界面不像Disqus、某必力那么华丽，但优点就是简洁。 MarkDown 全语法支持。 无后端实现。 Emoji 😉 其实前四点就已经足够打动我选择Valine啦。 官方对Valine的介绍： Valine 诞生于2017年8月7日，是一款基于LeanCloud的快速、简洁且高效的无后端评论系统。 理论上支持但不限于静态博客，目前已有Hexo、Jekyll、Typecho、Hugo、Ghost 等博客程序在使用Valine。 至于集成和配置，因NexT（NexT.Gemini v5.1.4）已经默认集成了Valine，所以整个操作三个步骤就可搞定：注册LeanCloud获取appid和appkey，修改NexT主题配置，生成部署。 注册LeanCloud获取AppID和AppKey 注册 这里有一点需要提醒的是，为了避免很多认证最好采用LeanCloud国际版进行注册，觉得无所谓可以略过。 注册前可先参考Pricing页面，选择Developer(Free)进行注册。 创建应用生成appid和appkey 注册验证完成后，先创建应用，选择开发版同时选择“根据现有应用SCHEMA创建”。 创建成功后在LeanCloud Console中：进入设置-应用Key，可见生成的App ID和App Key： 12App ID: your leancloud application appid #每个app有一个唯一ID,不可变更App Key: your leancloud application appkey #适用于所有平台 关联Blog站点的域名 在LeanCloud Console中：进入设置-安全中心-Web安全域名，写入需要关联的域名，并保存。 修改NexT主题配置取得App ID和App Key并关联Blog域名后，在NexT主题配置文件的Valine字段下，将enable改为true，在appid和appkey后写入LeanCloud上获取的App ID和App Key，Valine字段默认信息如下： 12345678910111213# Valine.# You can get your appid and appkey from https://leancloud.cn# more info please open https://valine.js.orgvaline: enable: false appid: # your leancloud application appid appkey: # your leancloud application appkey notify: false # mail notifier , https://github.com/xCss/Valine/wiki verify: false # Verification code placeholder: Just go go # comment box placeholder avatar: mm # gravatar style guest_info: nick,mail,link # custom comment header pageSize: 10 # pagination size Done上面的工作完成之后，就可以生成和部署，搞定收工。 123$ hexo clean$ hexo g$ hexo d 相关官方链接：valine.js.org、Valine on GitHub、LeanCloud国际版 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>web&amp;blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo上博文永久链接唯一化的实现]]></title>
    <url>%2Fposts%2F43f20bcb.html</url>
    <content type="text"><![CDATA[默认永久链接格式的问题和唯一化的意义 不利于SEO： Hexo永久链接的默认格式是:year/:month/:day/:title/，如果文章标题是中文的话，文章路径中就含有中文字符，不利于seo。 不利于Google、百度等抓取： 路径包含了年月日三个层级，太深不利于抓取。 不利于社会化分享和搜索： 使用:year/:month/:day/:title/默认链接格式时，如AddThis分享后就无法跳转到blog的源链接，而Algolia也存在搜索结果跳转关联页面时报404。 所以，就要考虑： 简化永久链接格式，即：简短化 使链接唯一化，即：文件标题随意修改，文章的链接也永远不变，而不会像原来采用:year/:month/:day/:title/的链接格式会因文章标题改变，而导致最初的链接失效造成死链。 所以，寻寻觅觅后发现大神落月rozbo搞出插件hexo-abbrlink(GitHub)、hexo-abbrlink(npmjs.com)为我们解决了这个问题。 让我们来看看如此精妙的实现方式！ 安装插件安装hexo-abbrlink插件，在站点根目录执行： 1$ npm install hexo-abbrlink --save 执行结果如下： 123456789101112131415$ cd taoblog$ npm install hexo-abbrlink --savenpm WARN babel-eslint@10.0.2 requires a peer of eslint@&gt;= 4.12.1 but none is installed. You must install peer dependencies yourself.+ hexo-abbrlink@2.0.5added 39 packages from 24 contributors in 5.479s ╭────────────────────────────────────────────────────────────────╮ │ │ │ New major version of npm available! 5.6.0 → 6.11.2 │ │ Changelog: https://github.com/npm/cli/releases/tag/v6.11.2 │ │ Run npm install -g npm to update! │ │ │ ╰────────────────────────────────────────────────────────────────╯ 修改站点配置文件修改站点配置文件_config.yml ，注释原先的permalink、permalink_defaults，并添加如下设置： 123456# permalink: :year/:month/:day/:title/# permalink_defaults:permalink: posts/:abbrlink.htmlabbrlink: alg: crc32 # 算法：crc16(default) and crc32 rep: hex # 进制：dec(default) and hex 生成并部署123$ hexo clean$ hexo g$ hexo d 执行$ hexo g时，提示信息的开头与原来有区别如下，这显示了已为文章生成了永久链接： 1234567$ hexo clean$ hexo gINFO Start processingINFO Generate link 786cd75a for post [Hexo上NexT主题配置WidgetPack的Rating widget文章投票功能]INFO Generate link fc418d47 for post [MarkDown支持代码高亮]INFO Generate link 14479307 for post [Typora中设置文字字体、字号和颜色]INFO Generate link 77130092 for post [Hexo添加RSS] 同时还会在文章的front-matter中加入abbrlink:，如下： 12345title: Hexo上NexT主题配置WidgetPack的Rating widget文章投票功能tags: hexocategores: web&amp;blogabbrlink: 786cd75adate: 2019-09-04 18:07:18 之后的$ hexo d顺利完成。 最终生成的永久链接形式如： https://adago2x.github.io/posts/786cd75a.html， Blog上分享链接后，在第三方社区跳转链接毫无问题，很完美！ 建议永久链接的设置最好在Hexo部署到位后，开始着手发布文章前进行设置。 在中途设置就会导致之前发布文章后原来相关的社会化分享链接、搜索失效，评论、投票等数据会清零，如果个人不介意的话倒也无所谓。 ~END~ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>web&amp;blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo上NexT主题五星评价StarRating的实现]]></title>
    <url>%2Fposts%2F786cd75a.html</url>
    <content type="text"><![CDATA[步骤Hexo上NexT主题已默认集成WidgetPack的Rating widget文章投票功能，所以配置过程很简单，其步骤如下： 在widgetpack.com上注册，并获取用户ID。 修改NexT主题配置文件。 登录widgetpack.com，设置投票方式。 详细配置过程在widgetpack.com上注册，Add new site成功后，后台自动生成的Rating Widget安装代码如下： 123456789101112131415&lt;div id="wpac-rating"&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt;wpac_init = window.wpac_init || [];wpac_init.push({widget: 'Rating', id: *****}); #id为注册生成的ID(function() { if ('WIDGETPACK_LOADED' in window) return; WIDGETPACK_LOADED = true; var mc = document.createElement('script'); mc.type = 'text/javascript'; mc.async = true; mc.src = 'https://embed.widgetpack.com/widget.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(mc, s.nextSibling);})();&lt;/script&gt;&lt;a href="https://widgetpack.com" class="wpac-cr"&gt;Star Rating WIDGET PACK&lt;/a&gt; NexT已经默认集成了WidgetPack的Ratingwidget： 只要查看主题配置文件_config.yml中的rating字段就可见相关默认配置。 而以上安装代码已默认集成到~/hexo/themes/next/layout/_third-party/rating.swig文件中。 所以，要启用Ratingwidget，只需要在widgetpack.com注册添加站点并获得ID后，修改NexT主题配置文件rating字段内容即可。 NexT主题配置文件中rating的默认设置如下： 123456# Star rating support to each article.# To get your ID visit https://widgetpack.comrating: enable: false id: #&lt;app_id&gt; color: fc6423 将enable改为true，添加在widgetpack.com上注册获取的ID，所有工作就完成了。 接下来就： 123$ hexo clean$ hexo g$ hexo d 设置投票方式Rating的投票方式在widgetpack.com上设置即可，有三种方式可选： Social IP Address Device（Cookie），国内建议采用此种方式 配置成功后的终极效果 桌面浏览器效果 手机浏览器效果 ~END~ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>web&amp;blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo添加RSS]]></title>
    <url>%2Fposts%2F77130092.html</url>
    <content type="text"><![CDATA[Hexo的Next主题集成RSS可以说是非常简单的一个操作，但也是一个极其容易搞错的操作，这里把失败和成功的过程都分享出来。 [TOC] 失败的操作安装执行npm install hexo-generator-feed，安装成功。 123456$ cd taoblog$ npm install hexo-generator-feednpm WARN babel-eslint@10.0.2 requires a peer of eslint@&gt;= 4.12.1 but none is installed. You must install peer dependencies yourself.+ hexo-generator-feed@1.2.2added 2 packages from 2 contributors in 2.985s 编辑配置文件 Hexo站点配置文件添加如下配置 12345678910# Extensions## Plugins: https://hexo.io/plugins/# RSSplugins:- hexo-generator-feed#Feed Atomfeed:type: atompath: atom.xmllimit: 20 NexT主题配置文件添加如下配置 1234# Set rss to false to disable feed link.# Leave rss as empty to use site's feed link.# Set rss to specific value if you have burned your feed already.rss: /atom.xml hexo生成报错执行hexo g后报错，如下： 1234567891011121314151617181920212223242526$ hexo cleanINFO Deleted database.INFO Deleted public folder.$ hexo gINFO Start processingFATAL Something's wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.htmlTemplate render error: (unknown path) [Line 8, Column 25] Error: Unable to call `the return value of (posts["first"])["updated"]["toISOString"]`, which is undefined or falsey at Object._prettifyError (/Users/user/taoblog/node_modules/nunjucks/src/lib.js:36:11) at /Users/user/taoblog/node_modules/nunjucks/src/environment.js:567:19 at Template.root [as rootRenderFunc] (eval at _compile (/Users/user/taoblog/node_modules/nunjucks/src/environment.js:637:18), &lt;anonymous&gt;:214:3) at Template.render (/Users/user/taoblog/node_modules/nunjucks/src/environment.js:556:10) at Hexo.module.exports (/Users/user/taoblog/node_modules/hexo-generator-feed/lib/generator.js:40:22) at Hexo.tryCatcher (/Users/user/taoblog/node_modules/bluebird/js/release/util.js:16:23) at Hexo.&lt;anonymous&gt; (/Users/user/taoblog/node_modules/bluebird/js/release/method.js:15:34) at /Users/user/taoblog/node_modules/hexo/lib/hexo/index.js:318:20 at tryCatcher (/Users/user/taoblog/node_modules/bluebird/js/release/util.js:16:23) at MappingPromiseArray._promiseFulfilled (/Users/user/taoblog/node_modules/bluebird/js/release/map.js:61:38) at MappingPromiseArray.PromiseArray._iterate (/Users/user/taoblog/node_modules/bluebird/js/release/promise_array.js:114:31) at MappingPromiseArray.init (/Users/user/taoblog/node_modules/bluebird/js/release/promise_array.js:78:10) at MappingPromiseArray._asyncInit (/Users/user/taoblog/node_modules/bluebird/js/release/map.js:30:10) at _drainQueueStep (/Users/user/taoblog/node_modules/bluebird/js/release/async.js:142:12) at _drainQueue (/Users/user/taoblog/node_modules/bluebird/js/release/async.js:131:9) at Async._drainQueues (/Users/user/taoblog/node_modules/bluebird/js/release/async.js:147:5) at Immediate.Async.drainQueues [as _onImmediate] (/Users/user/taoblog/node_modules/bluebird/js/release/async.js:17:14) at processImmediate (internal/timers.js:439:21) 卸载并恢复配置信息卸载hexo-generator-feed，删除站点配置文件、主题配置文件中的相关配置后，hexo生成即发布恢复正常。 卸载时的提示如下： 12345678910111213$ npm uninstall hexo-generator-feednpm WARN babel-eslint@10.0.2 requires a peer of eslint@&gt;= 4.12.1 but none is installed. You must install peer dependencies yourself.removed 2 packages in 2.575s ╭────────────────────────────────────────────────────────────────╮ │ │ │ New minor version of npm available! 6.10.3 → 6.11.2 │ │ Changelog: https://github.com/npm/cli/releases/tag/v6.11.2 │ │ Run npm install -g npm to update! │ │ │ ╰────────────────────────────────────────────────────────────────╯ 成功的操作重点：参考hexo官方Plugins以及hexo-generator-feed插件官方页面的安装与配置指导，顺利完成集成，具体如下。 Generate Atom 1.0 or RSS 2.0 feed. Install1$ npm install hexo-generator-feed --save Hexo 3: 1.x Hexo 2: 0.x 执行结果如下： 123456$ cd taoblog$ npm install hexo-generator-feed --savenpm WARN babel-eslint@10.0.2 requires a peer of eslint@&gt;= 4.12.1 but none is installed. You must install peer dependencies yourself.+ hexo-generator-feed@1.2.2added 2 packages from 2 contributors in 2.789s UseIn the front-matter of your post, you can optionally add a description, intro or excerpt setting to write a summary for the post. Otherwise the summary will default to the excerpt or the first 140 characters of the post. Options在hexo站点配置文件 _config.yml中# Extensions字段的#Plugins: https://hexo.io/plugins/项下添加如下配置信息，即可完成。 12345678910feed: type: atom path: atom.xml limit: 20 hub: content: content_limit: 140 content_limit_delim: ' ' order_by: -date icon: icon.png type - Feed type. (atom/rss2) path - Feed path. (Default: atom.xml/rss2.xml) limit - Maximum number of posts in the feed (Use 0 or false to show all posts) hub - URL of the PubSubHubbub hubs (Leave it empty if you don’t use it) content - (optional) set to ‘true’ to include the contents of the entire post in the feed. content_limit - (optional) Default length of post content used in summary. Only used, if content setting is false and no custom post description present. content_limit_delim - (optional) If content_limit is used to shorten post contents, only cut at the last occurrence of this delimiter before reaching the character limit. Not used by default. order_by - Feed order-by. (Default: -date) icon - (optional) Custom feed icon. Defaults to a gravatar of email specified in the main config. Generate &amp; deploy123$ hexo clean$ hexo g$ hexo d 原因分析 成功操作与失败操作安装的都是同一个版本的Feed插件即hexo-generator-feed@1.2.2版本，成功的操作只需配置站点配置文件，而且配置信息与失败操作中参考的配置信息不同，而且并不需要配置主题配置文件。 教训：首先要参考官方相关文档，会躲过很多坑。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>web&amp;blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[纪念AaronSwartz]]></title>
    <url>%2Fposts%2Ff45c04d4.html</url>
    <content type="text"><![CDATA[纪念AaronSwartz——他用生命捍卫了互联网的开放和自由 来源：http://www.lupaworld.com/article-266395-1.html 2013 年 1 月 11 日，著名社交网站 Reddit 联合创始人，web.py 框架的设计者 Aaron Swartz 在其公寓内自杀身亡。这个毕生追求互联网真正开放精神的人最后选择自杀来和这个世界告别，当时他才 26 岁。 回顾 Aaron Swartz 短暂的一生，作为一个开发者和技术人员，他没有用高超的技术来获取大量的财富，而是不遗余力地使互联网和世界成为一个更公平，更美好的地方。 Aaron Swartz 反对封锁知识，长年投身于信息自由化运动，他参与制定规格的 RSS 让我们可以更有效地接收丰富的信息；和 John Gruber 一起开发的 Markdown 让大家更方便地编写和传播内容；他重写了 Reddit，让数百万人得以共享资讯；他参与制定的知识共享协议促进了内容的自由及公平使用，并且让內容创作者了解到还有版权以外的其他选项。 无论是 RSS，知识共享协议，还是 Reddit，都离不开 Aaron Swartz 的精神和理念：让信息更容易获取，更加自由。 Aaron Swartz 曾在 2008 年写下题目为 Guerrilla Open Access Manifesto（中文版）的宣言，下面是节选： 信息就是能源。但就像所有能源一样，有些人只想占为己有。世界上所有的科学和文化遗产，已在书籍和期刊上发布了数个世纪，正渐渐地被少数私有的公司数字化并上锁。想要阅读那些有着最著名研究成果的论文？你必须支付给如 Reed Elsevier 这样的出版商大把钱。 …… …… 我们要夺回信息，无论它们被存在何处，制作我们的副本并和全世界分享。我们要取到版权到期的东西并将它们归档，我们要买下秘密的资料库并将它们放到网上。我们要下载科学期刊并将它们上传到文件分享网络。我们要为游击队开放访问而战。 只要全世界有足够多的我们，那就不仅是传达了一个反对知识私有化的强有力信号，我们还将让它成为过去。你愿意和我们一起吗？ 亚伦·斯沃茨 (Aaron Swartz) 2008 年 7 月，意大利 Eremo 2009 年，他成立了 Progressive Change Campaign Committee（进步改变运动委员会），2010 年，他又创建了 Demand Progress （求进会）—— 利用互联网来组织群众与议会和政府对话。 Aaron Swartz 在 2011 年 7 月 19 日遭到指控，因其在 MIT 非法下载大量 JSTOR 学术期刊文章，遭联邦政府起诉被捕，面临最高 35 年的监禁。 当时，Aaron Swartz 有两个选择：①认罪，承认犯下重罪，35 年的判决会变成 3 个月入狱 + 1 年的居家监禁（不得使用电脑）②不认罪，那就有可能接受 35 年监禁的最坏结果。Aaron Swartz 选择了后者。 在起诉期间，Aaron Swartz 公开反对 SOPA 法案，Aaron Swartz 通过他的 Demand Progress 把民众们网聚起来，和政府做斗争，最终使得整个社会都在反对 SOPA，也使得那些议员纷纷改变自己的想法，白宫最终放弃了这个法案。 而在次年 2012 年 9 月，政府对 Aaron Swartz 进行了更为严厉的起诉，新加入了另外 9 条起诉，如果成立，Aaron Swartz 最高获刑 50 年外加 100 万美金的罚款。同样，检察官给出了选择，只要 Aaron Swartz 认罪，那就只起诉他 6 个月的监禁。Aaron Swartz 再次拒绝。 之后，2013 年 1 月 11 日，Aaron Swartz 在其纽约布鲁克林的寓所内，用一根皮带上吊自杀，尸体随后被女友发现，年仅 26 岁。 这就是 Aaron Swartz 传奇的一生，他用他的生命捍卫了互联网的开放和自由。 现在，距离 Aaron Swartz 离开我们已过去了五年。六年后的今天，当初 Aaron Swartz 用生命捍卫的互联网，是否有如他所愿，变得更开放和自由了？ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>传奇</category>
      </categories>
      <tags>
        <tag>人物</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Typora中设置文字字体、字号和颜色]]></title>
    <url>%2Fposts%2F14479307.html</url>
    <content type="text"><![CDATA[通过在正文中直接内嵌HTML代码实现： 123&lt;font face="STCAIYUN"&gt;华文字体&lt;/font&gt;&lt;font color=gray size=5&gt;颜色为灰色&lt;/font&gt;&lt;font color=#0099ff size=5 face="黑体"&gt;color=#0099ff size=5 face="黑体"&lt;/font&gt; 下面内嵌以上HTML代码片段，即实现如下风格： 华文字体颜色为灰色color=#0099ff size=5 face=”黑体” 文字背景色1&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=#FF4500&gt;橘红色背景OrangeRed，十六进制颜色值：#FF4500， rgb(255, 69, 0)&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; 橘红色背景OrangeRed，十六进制颜色值：#FF4500， rgb(255, 69, 0) 🏴 👋 👋 🎏 😂😄😸😙 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>程序技术</category>
      </categories>
      <tags>
        <tag>MarkDown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MarkDown支持代码高亮]]></title>
    <url>%2Fposts%2Ffc418d47.html</url>
    <content type="text"><![CDATA[本文来源于他人原创，仅转载学习。 原创链接：https://blog.csdn.net/u012102104/article/details/78950290 在MarkDown编辑时，我们经常需要引入一段代码，此时若果代码能高亮显示，界面就会非常友好。 使用前：public static void main(String[] args){System.out.println(“Hello”);} 使用后： 123public static void main(String[] args){ System.out.println("Hello");}123 其中，使用 123``` key 代码段 ```123 来标记语言时，下面的就会表格就会派上用场了 language key 1C 1c ActionScript actionscript Apache apache AppleScript applescript AsciiDoc asciidoc AspectJ asciidoc AutoHotkey autohotkey AVR Assembler avrasm Axapta axapta Bash bash BrainFuck brainfuck Cap’n Proto capnproto Clojure REPL clojure Clojure clojure CMake cmake CoffeeScript coffeescript C++ cpp C# cs CSS css D d Dart d Delphi delphi Diff diff Django django DOS.bat dos Dust dust Elixir elixir ERB(Embedded Ruby) erb Erlang REPL erlang-repl Erlang erlang FIX fix F# fsharp G-code(ISO 6983) gcode Gherkin gherkin GLSL glsl Go go Gradle gradle Groovy groovy Haml haml Handlebars handlebars Haskell haskell Haxe haxe HTML html HTTP http Ini file ini Java java JavaScript javascript JSON json Lasso lasso Less less Lisp lisp LiveCode livecodeserver LiveScript livescript Lua lua Makefile makefile Markdown markdown Mathematica mathematica Matlab matlab MEL (Maya Embedded Language) mel Mercury mercury Mizar mizar Monkey monkey Nginx nginx Nimrod nimrod Nix nix NSIS nsis Objective C objectivec OCaml ocaml Oxygene oxygene Parser 3 parser3 Perl perl PHP php PowerShell powershell Processing processing Python’s profiler output profile Protocol Buffers protobuf Puppet puppet Python python Q q R r RenderMan RIB rib Roboconf roboconf RenderMan RSL rsl Ruby ruby Oracle Rules Language ruleslanguage Rust rust Scala scala Scheme scheme Scilab scilab SCSS scss Smali smali SmallTalk smalltalk SML sml SQL sql Stata stata STEP Part21(ISO 10303-21) step21 Stylus stylus Swift swift Tcl tcl Tex tex text text/plain Thrift thrift Twig twig TypeScript typescript Vala vala VB.NET vbnet VBScript in HTML vbscript-html VBScript vbscript Verilog verilog VHDL vhdl Vim Script vim Intel x86 Assembly x86asm XL xl XML xml YAML yml document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>程序技术</category>
      </categories>
      <tags>
        <tag>神技</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fposts%2F4a17b156.html</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
  </entry>
</search>
